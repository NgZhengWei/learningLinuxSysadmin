Everything You Need to Know About $PATH in Bash
A colon seperated list of dir which bash goes through to check for binary sequentially
When a command is given, bash looks through the dirs in the path sequentially and executes the script once it finds it
- command: which <command> tells you the dir the command is found in
- appending to $PATH: PATH=$PATH:<path to dir> OR PATH=<path to dir>:$PATH (prepending so new dir gets searched first)
- full paths should be used inside of scripts because paths can be edited and you could unintentionally run an evil script as sudo
To edit $PATH var on startup of bash everytime, go to /home/user/.profile
Path is originally set at /etc/profile and /etc/profile.d/ before the user's .profile file
Real life use-case:
If path needs to be changed for one user, do it in the home dir /home/user/.profile
For root user its in /root
To change all users excpet for root, do it in /etc/profile
System wide $PATH is found in /etc/environment

The Linux 'script' Command: Record Your Shell Sessions
Start the script session using 'script' and end using 'exit' or Ctrl d
- command: script <filename>
- used to prove you've done something
- record hard to produce results
- option: --timing=time.log : keep the timing log
- command: scriptreplay -s <script.log file> -t time.log
- command: script -c 'command' <filename> (inputs a single command and log the output)

Linux Shell Aliases: What you need to know
command: alias <alias name>="<command>" - to add a new alias
command: alias - to list all alias
command: unalias <alias command> - unalias command
Unique commands to shorten long repetitive commands you always use
Also used for shadowing, which is overwriting other commands
~/.bashrc is the config file for bash and is ran everytime bash starts
- add alias to ~/.bashrc if you want alias to be permanent

8 Basic Isof Commands Every Sysadmin Needs to Know
Get relation between process and file system
- which process have a specific file open (isof <filepath>)
- which file a specific file has open (isof -p <PID>)
- debug certain problems happening on file systems
- check what users are doing on the file systems (-u <user>)
- look for the binary or log file for a specific program (grep <bin/.so/ log>)
- check whats going on with the network socket (-i <port>/<tcp/udp>)
Good for looking for specific files of processes that are running
Usually you are looking for the command, PID and path
command: lsof - list open files
command: lsof <path to file> - returns processes which have that file open
- e.g. look for processes which are still operation on outdated files
command: lsof -p <PID> -lists files that a program has open
command: lsof -u <user> - see what programs a user has open
command: lsof <PID> | grep .so - look for shared libraries the proc has open
command: lsof <PID> | grep log - look for log that the program is writing to
command: lsof -i :<port number> OR <tcp/udp>

Monitoring Linux Systems and Services with Monit
Monitor system stats and application stats
- CPU
- Port 80 http
- Port 3306 mysql (memory usage)
- php-fpm and ngix processes
- site-specific monitoring config files in /etc/monit/monit.d/sitename.cfg
- Web interface (local forwarding with SSH)
- Email alerts
Monit config file: /etc/monit/monitrc
New location for monit.d is likely conf-available
Monit is set up on port 2812 by default as in /etc/monit/monitrc, you set httpd to port 2812. 
- if you try to send a http req to 127.0.0.1:2812, you get 401 unauthorised as password and username was not supplied but this shows that the service is up and running
- netstat -tupln shows that monit is indeed listening on port 2812
- SSH can be used to create a direct tunnel to access the monit port instead as we set it up such that it is not accessible by a random on the internet with the command "allow username:password". The command is "ssh -L 1234:localhost:2812 remoteuser@remotehost.net"
***Skipping monit because I dont understand many things, I'll come back to it laterz***

Service Management with systemd
Systemd is the modern init service.
systemctl: manages services (older linux systems: service mysql status)
- systemctl status  mysql (gets status)
- systemctl start   nginx php4-fpm monit (starts in current session)
- systemctl stop    <service> (stops in current session)
- systemctl enable  mysql nginx php5-fpm monit (start at boot time)
- systemctl disable <service> (disables at boot)
- systemctl reload  <service> (re-read program config files)
- systemctl restart <service> (kill process and start it again, re-reading the config files)
journalctl: manages logs
- journalctl -xn (add explanation where available and show n lines)
- journalctl -u <unit/ service> (get log entries from a specific service)
- journalctl -b (boot log)
- journalctl -f (follow the journal)
- journalctl --since "10 min ago" (show entries not older than date) 

What Every Sysadmin Needs to Know About Tech Debt
A universal issue to understamd
- costing company money
- garner respect amd have less "nightmare projects"
- good interview question to test seniority of canidate
It is the consequence of decisions. E.g. reducing features to save time on dev but has to be paid back later
- undocumented code
- projects missing component (security, automation, config management, repeatability)
- snowflake servers
- Things no one understands anymore
Costs you when you need to: add features, do maintenance, train and estimates
Paying off technical debt:
- ticketing system
- one day per week
- learn to communicate with business people or managers about it
- stop being optimistic about estimates

Ansible 2 For Beginners: Linux Automation Course Overview
Uses: Provisioning, Configuration Management, Deployment, Orchestration and Part of Continuous Deployment
He has a course on this: https://www.packtpub.com/product/ansible-2-for-beginners-video/9781786465719
